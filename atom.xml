<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A·I</title>
  
  <subtitle>牟磊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-18T07:25:41.338Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leila Mou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>apply_mask_on_image</title>
    <link href="http://yoursite.com/2019/01/18/apply-mask-on-image/"/>
    <id>http://yoursite.com/2019/01/18/apply-mask-on-image/</id>
    <published>2019-01-18T07:18:50.000Z</published>
    <updated>2019-01-18T07:25:41.338Z</updated>
    
    <content type="html"><![CDATA[<p>这是一份python代码，实现将mask半透明显示在原图上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> colorsys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_mask</span><span class="params">(image, mask, color, alpha=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    apply mask (region) to original image</span></span><br><span class="line"><span class="string">    :param image: original image</span></span><br><span class="line"><span class="string">    :param mask: your mask</span></span><br><span class="line"><span class="string">    :param color: which color would like to apply of mask</span></span><br><span class="line"><span class="string">    :param alpha: trade-off</span></span><br><span class="line"><span class="string">    :return: merged image</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        image[:, :, channel] = np.where(mask &gt; <span class="number">0</span>,</span><br><span class="line">                                        image[:, :, channel] * (<span class="number">1</span> - alpha) + alpha * color[channel] * <span class="number">255</span>,</span><br><span class="line">                                        image[:, :, channel])</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_color</span><span class="params">(N, bright=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    generate colors of mask, create hsv color and convert it to rgb format</span></span><br><span class="line"><span class="string">    :param N: classes number</span></span><br><span class="line"><span class="string">    :param bright: brightness of the Nth color</span></span><br><span class="line"><span class="string">    :return: RGB color</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    brightness = <span class="number">1.0</span> <span class="keyword">if</span> bright <span class="keyword">else</span> <span class="number">0.7</span></span><br><span class="line">    hsv = [(i / N, <span class="number">1</span>, brightness) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</span><br><span class="line">    colors = list(map(<span class="keyword">lambda</span> c: colorsys.hsv_to_rgb(*c), hsv))</span><br><span class="line">    random.shuffle(colors)</span><br><span class="line">    <span class="keyword">return</span> colors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mask_path = <span class="string">'xxx'</span></span><br><span class="line">    image_path = <span class="string">'xxx'</span></span><br><span class="line">    classes_num = <span class="number">1</span></span><br><span class="line">    mask = cv2.imread(mask_path)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line"></span><br><span class="line">    w, h, _ = image.shape</span><br><span class="line">    mask = cv2.resize(mask, (h, w))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create colors</span></span><br><span class="line">    colors = random_color(N=classes_num)</span><br><span class="line">    <span class="comment"># get the first class' color</span></span><br><span class="line">    colors = colors[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># get mask value of the corresponding pixel's</span></span><br><span class="line">    mask = mask[:, :, <span class="number">0</span>]</span><br><span class="line">    image = apply_mask(image, mask, colors)</span><br><span class="line">    image = np.uint8(image)</span><br><span class="line">    cv2.imwrite(<span class="string">"xxx"</span>, image)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一份python代码，实现将mask半透明显示在原图上。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pytorch-introduction</title>
    <link href="http://yoursite.com/2019/01/10/pytorch-introduction/"/>
    <id>http://yoursite.com/2019/01/10/pytorch-introduction/</id>
    <published>2019-01-10T14:36:01.000Z</published>
    <updated>2019-01-10T14:49:32.010Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/005CmS3Mly1fz1v8gci8cj30a604ojrd.jpg" alt=""></p><blockquote><p>本文不在介绍PyTorch上浪费时间。本文的目的是记录怎么使用PyTorch进行训练模型。</p></blockquote><p>PyTorch训练模型大致分为以下几个步骤：</p><ul><li>定义模型</li><li>定义数据加载文件</li><li>定义训练文件</li></ul><h1 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h1><p>PyTorch在定义模型时，所有的类都继承<code>nn.Module</code>。我们只需要实现<code>__init__()</code>函数和<code>forward()</code>函数就可以了。在<code>__init__()</code>函数中定义需要模型需执行的操作，进行操作声明，在<code>forward()</code>函数中定义具体的数据运算。以<strong>UNet</strong>为例：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005CmS3Mly1fz1v8gci8cj30a604ojrd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文不在介绍PyTorch上浪费时间。本文的目的是记录怎么使用Py
      
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>first-post</title>
    <link href="http://yoursite.com/2019/01/10/first-post/"/>
    <id>http://yoursite.com/2019/01/10/first-post/</id>
    <published>2019-01-10T08:41:48.000Z</published>
    <updated>2019-01-10T08:43:05.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Test-Title"><a href="#Test-Title" class="headerlink" title="Test Title"></a>Test Title</h1><h2 id="Test-subtitle"><a href="#Test-subtitle" class="headerlink" title="Test subtitle"></a>Test subtitle</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Test-Title&quot;&gt;&lt;a href=&quot;#Test-Title&quot; class=&quot;headerlink&quot; title=&quot;Test Title&quot;&gt;&lt;/a&gt;Test Title&lt;/h1&gt;&lt;h2 id=&quot;Test-subtitle&quot;&gt;&lt;a href=&quot;#Test-sub
      
    
    </summary>
    
    
      <category term="first blog" scheme="http://yoursite.com/tags/first-blog/"/>
    
  </entry>
  
</feed>
